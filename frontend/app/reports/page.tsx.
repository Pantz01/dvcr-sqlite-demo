'use client'

import { useEffect, useMemo, useState } from 'react'
import RequireAuth from '@/components/RequireAuth'
import RoleGuard from '@/components/RoleGuard'
import { API, authHeaders, jsonHeaders } from '@/lib/api'

type Truck = {
  id: number
  number: string
  vin?: string | null
  active: boolean
  odometer: number
}

type Defect = {
  id: number
  description?: string | null
  resolved: boolean
  component?: string | null
  severity?: string | null
}

type Note = {
  id: number
  text: string
  created_at: string
  author?: { name?: string }
}

type Report = {
  id: number
  created_at: string
  odometer?: number | null
  status: 'OPEN' | 'CLOSED' | string
  summary?: string | null
  type: 'pre' | 'post' | string
  defects?: Defect[]
  notes?: Note[]
}

export default function ReportsPage() {
  return (
    <RequireAuth>
      <RoleGuard roles={['manager', 'admin']}>
        <ReportsInner />
      </RoleGuard>
    </RequireAuth>
  )
}

function ReportsInner() {
  const [trucks, setTrucks] = useState<Truck[]>([])
  const [truckId, setTruckId] = useState<number | null>(null)

  const [reports, setReports] = useState<Report[]>([])
  const [total, setTotal] = useState(0)
  const [skip, setSkip] = useState(0)
  const [limit, setLimit] = useState(25)

  const [loading, setLoading] = useState(false)

  const [active, setActive] = useState<Report | null>(null)

  const [filterType, setFilterType] = useState<'all' | 'pre' | 'post'>('all')
  const [filterText, setFilterText] = useState('')

  useEffect(() => {
    loadTrucks()
  }, [])

  useEffect(() => {
    if (truckId) loadReports()
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [truckId, skip, limit, filterType])

  async function loadTrucks() {
    const r = await fetch(`${API}/trucks`, { headers: authHeaders() })
    if (!r.ok) { alert(await r.text()); return }
    const list: Truck[] = await r.json()
    setTrucks(list)
    if (list.length && !truckId) setTruckId(list[0].id)
  }

  async function loadReports() {
    if (!truckId) return
    setLoading(true)
    const typeParam = filterType === 'all' ? '' : `&type=${filterType}`
    const r = await fetch(`${API}/trucks/${truckId}/reports?skip=${skip}&limit=${limit}${typeParam}`, {
      headers: authHeaders(),
    })
    setLoading(false)
    if (!r.ok) { alert(await r.text()); return }
    const items: Report[] = await r.json()
    const totalCount = Number(r.headers.get('X-Total-Count') || '0')
    setReports(items)
    setTotal(totalCount)
    setActive(items[0] || null)
  }

  // hydrate a single report (with defects/notes)
  async function openReport(id: number) {
    const rr = await fetch(`${API}/reports/${id}`, { headers: authHeaders() })
    if (!rr.ok) { alert(await rr.text()); return }
    setActive(await rr.json())
  }

  // pagination helpers
  const page = Math.floor(skip / limit) + 1
  const pages = Math.max(1, Math.ceil(total / limit))

  function goPage(p: number) {
    const clamped = Math.max(1, Math.min(p, pages))
    setSkip((clamped - 1) * limit)
  }

  // --- report field updates ---
  async function patchReport(patch: Partial<Pick<Report, 'odometer' | 'summary' | 'status' | 'type'>>) {
    if (!active) return
    const r = await fetch(`${API}/reports/${active.id}`, {
      method: 'PATCH',
      headers: jsonHeaders(),
      body: JSON.stringify(patch),
    })
    if (!r.ok) { alert(await r.text()); return }
    await openReport(active.id)
    // refresh list row too
    await loadReports()
  }

  async function deleteReport() {
    if (!active) return
    if (!confirm('Delete this report? This will remove its issues and notes.')) return
    const r = await fetch(`${API}/reports/${active.id}`, { method: 'DELETE', headers: authHeaders() })
    if (!r.ok && r.status !== 204) { alert(await r.text()); return }
    // reload list; pick first
    await loadReports()
  }

  // --- defects (issues) ---
  async function addDefect(text: string) {
    if (!active) return
    const body = { component: 'general', severity: 'minor', description: text.trim() }
    if (!body.description) return
    const r = await fetch(`${API}/reports/${active.id}/defects`, {
      method: 'POST',
      headers: jsonHeaders(),
      body: JSON.stringify(body),
    })
    if (!r.ok) { alert(await r.text()); return }
    await openReport(active.id)
  }

  async function editDefect(d: Defect) {
    const next = prompt('Update issue text:', d.description || '') ?? ''
    const r = await fetch(`${API}/defects/${d.id}`, {
      method: 'PATCH',
      headers: jsonHeaders(),
      body: JSON.stringify({ description: next }),
    })
    if (!r.ok) { alert(await r.text()); return }
    if (active) await openReport(active.id)
  }

  async function toggleResolved(d: Defect) {
    const r = await fetch(`${API}/defects/${d.id}`, {
      method: 'PATCH',
      headers: jsonHeaders(),
      body: JSON.stringify({ resolved: !d.resolved }),
    })
    if (!r.ok) { alert(await r.text()); return }
    if (active) await openReport(active.id)
  }

  async function deleteDefect(id: number) {
    if (!confirm('Delete this issue?')) return
    const r = await fetch(`${API}/defects/${id}`, { method: 'DELETE', headers: authHeaders() })
    if (!r.ok && r.status !== 204) { alert(await r.text()); return }
    if (active) await openReport(active.id)
  }

  // client-side text filter over summary + defects
  const filtered = useMemo(() => {
    if (!filterText.trim()) return reports
    const q = filterText.toLowerCase()
    return reports.filter(r => {
      const inSummary = (r.summary || '').toLowerCase().includes(q)
      const inDefects = (r.defects || []).some(d => (d.description || '').toLowerCase().includes(q))
      return inSummary || inDefects
    })
  }, [reports, filterText])

  return (
    <main className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">Reports</h1>

      {/* Controls */}
      <div className="border rounded-2xl p-4 grid md:grid-cols-4 gap-3 items-end">
        <label className="grid gap-1 text-sm md:col-span-2">
          <span className="text-gray-600">Truck</span>
          <select
            className="border p-2 rounded-xl"
            value={truckId ?? ''}
            onChange={(e) => { setSkip(0); setTruckId(Number(e.target.value) || null) }}
          >
            {trucks.map(t => (
              <option key={t.id} value={t.id}>
                {t.number} {t.active ? '' : '(Inactive)'}
              </option>
            ))}
          </select>
        </label>

        <label className="grid gap-1 text-sm">
          <span className="text-gray-600">Type</span>
          <select
            className="border p-2 rounded-xl"
            value={filterType}
            onChange={(e) => { setSkip(0); setFilterType(e.target.value as any) }}
          >
            <option value="all">All</option>
            <option value="pre">Pre</option>
            <option value="post">Post</option>
          </select>
        </label>

        <label className="grid gap-1 text-sm">
          <span className="text-gray-600">Search</span>
          <input
            className="border p-2 rounded-xl"
            placeholder="Find in summary/issues"
            value={filterText}
            onChange={(e) => setFilterText(e.target.value)}
          />
        </label>
      </div>

      <div className="grid lg:grid-cols-3 gap-4">
        {/* Left: report list */}
        <div className="border rounded-2xl overflow-hidden">
          <div className="p-3 font-semibold border-b flex items-center justify-between">
            <span>Report List</span>
            <span className="text-xs text-gray-600">Total: {total}</span>
          </div>

          {loading ? (
            <div className="p-4 text-sm text-gray-500">Loading…</div>
          ) : filtered.length === 0 ? (
            <div className="p-4 text-sm text-gray-500">No reports.</div>
          ) : (
            <div className="max-h-[60vh] overflow-auto divide-y">
              {filtered.map(r => (
                <button
                  key={r.id}
                  className={`w-full text-left p-3 hover:bg-gray-50 ${active?.id === r.id ? 'bg-gray-50' : ''}`}
                  onClick={() => openReport(r.id)}
                >
                  <div className="text-sm">
                    {new Date(r.created_at).toLocaleString()} · Odo {r.odometer ?? '—'} · {r.status.toUpperCase()}
                  </div>
                  <div className="text-xs text-gray-600">
                    Type {r.type?.toUpperCase?.() || '—'}{r.summary ? ` · ${r.summary}` : ''}
                  </div>
                </button>
              ))}
            </div>
          )}

          {/* Pagination */}
          <div className="p-3 border-t flex items-center justify-between text-sm">
            <div>Page {page} / {Math.max(1, pages)}</div>
            <div className="flex gap-2">
              <button className="border rounded px-2 py-1" onClick={() => goPage(1)} disabled={page <= 1}>⟪</button>
              <button className="border rounded px-2 py-1" onClick={() => goPage(page - 1)} disabled={page <= 1}>‹ Prev</button>
              <button className="border rounded px-2 py-1" onClick={() => goPage(page + 1)} disabled={page >= pages}>Next ›</button>
              <button className="border rounded px-2 py-1" onClick={() => goPage(pages)} disabled={page >= pages}>⟫</button>
            </div>
          </div>
        </div>

        {/* Right: details */}
        <div className="lg:col-span-2 space-y-4">
          <div className="border rounded-2xl">
            <div className="p-3 font-semibold border-b">Details</div>
            {!active ? (
              <div className="p-4 text-sm text-gray-500">Select a report on the left.</div>
            ) : (
              <div className="p-4 space-y-4">
                {/* Header */}
                <div className="text-sm text-gray-700">
                  Created <b>{new Date(active.created_at).toLocaleString()}</b> · Status <b>{active.status}</b>
                </div>

                {/* Editable fields */}
                <div className="grid sm:grid-cols-2 gap-3">
                  <Labeled label="Odometer">
                    <input
                      type="number"
                      defaultValue={active.odometer ?? 0}
                      className="border p-2 rounded-xl w-full"
                      onBlur={(e) => patchReport({ odometer: parseInt(e.target.value || '0', 10) })}
                    />
                  </Labeled>

                  <Labeled label="Type">
                    <select
                      defaultValue={active.type || 'pre'}
                      className="border p-2 rounded-xl w-full"
                      onChange={(e) => patchReport({ type: e.target.value as 'pre' | 'post' })}
                    >
                      <option value="pre">pre</option>
                      <option value="post">post</option>
                    </select>
                  </Labeled>

                  <Labeled label="Summary">
                    <input
                      defaultValue={active.summary ?? ''}
                      className="border p-2 rounded-xl w-full"
                      onBlur={(e) => patchReport({ summary: e.target.value })}
                    />
                  </Labeled>

                  <Labeled label="Status">
                    <select
                      defaultValue={active.status}
                      className="border p-2 rounded-xl w-full"
                      onChange={(e) => patchReport({ status: e.target.value })}
                    >
                      <option value="OPEN">OPEN</option>
                      <option value="CLOSED">CLOSED</option>
                    </select>
                  </Labeled>
                </div>

                {/* Issues */}
                <IssuesPanel
                  defects={active.defects || []}
                  onAdd={addDefect}
                  onEdit={editDefect}
                  onToggle={toggleResolved}
                  onDelete={deleteDefect}
                />

                {/* Danger zone */}
                <div className="border rounded-2xl p-3">
                  <div className="font-semibold mb-2">Danger Zone</div>
                  <button className="border border-red-600 text-red-600 rounded-xl px-3 py-2" onClick={deleteReport}>
                    Delete Report
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </main>
  )
}

function Labeled({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <label className="grid gap-1 text-sm">
      <span className="text-gray-600">{label}</span>
      {children}
    </label>
  )
}

function IssuesPanel({
  defects,
  onAdd,
  onEdit,
  onToggle,
  onDelete,
}: {
  defects: Defect[]
  onAdd: (text: string) => void
  onEdit: (d: Defect) => void
  onToggle: (d: Defect) => void
  onDelete: (id: number) => void
}) {
  const [text, setText] = useState('')
  return (
    <div className="border rounded-2xl overflow-hidden">
      <div className="p-3 font-semibold border-b">Issues</div>

      <div className="p-3 grid sm:grid-cols-5 gap-2">
        <input
          className="border p-2 rounded-xl sm:col-span-4"
          placeholder="Add an issue"
          value={text}
          onChange={(e) => setText(e.target.value)}
        />
        <button
          className="border rounded-xl p-2"
          onClick={() => { if (text.trim()) { onAdd(text); setText('') } }}
        >
          Add
        </button>
      </div>

      {defects.length === 0 ? (
        <div className="p-3 text-sm text-gray-500">No issues yet.</div>
      ) : (
        <div className="divide-y">
          {defects.map(d => (
            <div key={d.id} className="p-3 flex items-center gap-3 text-sm">
              <div className="flex-1">
                <div className="font-medium">{d.description || '(no description)'}</div>
                <div className="text-xs text-gray-600">{d.resolved ? 'Resolved' : 'Open'}</div>
              </div>
              <button className="text-xs underline" onClick={() => onEdit(d)}>Edit</button>
              <button className="text-xs underline" onClick={() => onToggle(d)}>
                {d.resolved ? 'Reopen' : 'Resolve'}
              </button>
              <button className="text-xs underline text-red-600" onClick={() => onDelete(d.id)}>
                Delete
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}
